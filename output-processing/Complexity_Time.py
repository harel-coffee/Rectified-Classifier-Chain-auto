methodlist=['BR-SVM', 'BR-SVM', 'BR-SVM', 'BR-SVM', 'BR-SVM', 'BR-Gaussian',
       'BR-Gaussian', 'BR-Gaussian', 'BR-Gaussian', 'BR-Gaussian',
       'BR-LinearRegression', 'BR-LinearRegression',
       'BR-LinearRegression', 'BR-LinearRegression',
       'BR-LinearRegression', 'BR-randomforest', 'BR-randomforest',
       'BR-randomforest', 'BR-randomforest', 'BR-randomforest', 'BR-xgb',
       'BR-xgb', 'BR-xgb', 'BR-xgb', 'BR-xgb', 'BR-sgd', 'BR-sgd',
       'BR-sgd', 'BR-sgd', 'BR-sgd', 'BR-AdaBoost', 'BR-AdaBoost',
       'BR-AdaBoost', 'BR-AdaBoost', 'BR-AdaBoost', 'LP-SVM', 'LP-SVM',
       'LP-SVM', 'LP-SVM', 'LP-SVM', 'LP-Gaussian', 'LP-Gaussian',
       'LP-Gaussian', 'LP-Gaussian', 'LP-Gaussian', 'LP-LinearRegression',
       'LP-LinearRegression', 'LP-LinearRegression',
       'LP-LinearRegression', 'LP-LinearRegression', 'LP-randomforest',
       'LP-randomforest', 'LP-randomforest', 'LP-randomforest',
       'LP-randomforest', 'LP-xgb', 'LP-xgb', 'LP-xgb', 'LP-xgb',
       'LP-xgb', 'LP-sgd', 'LP-sgd', 'LP-sgd', 'LP-sgd', 'LP-sgd',
       'LP-AdaBoost', 'LP-AdaBoost', 'LP-AdaBoost', 'LP-AdaBoost',
       'LP-AdaBoost', 'CC-SVM', 'CC-SVM', 'CC-SVM', 'CC-SVM', 'CC-SVM',
       'CC-Gaussian', 'CC-Gaussian', 'CC-Gaussian', 'CC-Gaussian',
       'CC-Gaussian', 'CC-LinearRegression', 'CC-LinearRegression',
       'CC-LinearRegression', 'CC-LinearRegression',
       'CC-LinearRegression', 'CC-randomforest', 'CC-randomforest',
       'CC-randomforest', 'CC-randomforest', 'CC-randomforest', 'CC-xgb',
       'CC-xgb', 'CC-xgb', 'CC-xgb', 'CC-xgb', 'CC-sgd', 'CC-sgd',
       'CC-sgd', 'CC-sgd', 'CC-sgd', 'CC-AdaBoost', 'CC-AdaBoost',
       'CC-AdaBoost', 'CC-AdaBoost', 'CC-AdaBoost', 'RCC_CE-SVM',
       'RCC_CE-SVM', 'RCC_CE-SVM', 'RCC_CE-SVM', 'RCC_CE-SVM',
       'RCC_CE-Gaussian', 'RCC_CE-Gaussian', 'RCC_CE-Gaussian',
       'RCC_CE-Gaussian', 'RCC_CE-Gaussian', 'RCC_CE-LinearRegression',
       'RCC_CE-LinearRegression', 'RCC_CE-LinearRegression',
       'RCC_CE-LinearRegression', 'RCC_CE-LinearRegression',
       'RCC_CE-randomforest', 'RCC_CE-randomforest',
       'RCC_CE-randomforest', 'RCC_CE-randomforest',
       'RCC_CE-randomforest', 'RCC_CE-xgb', 'RCC_CE-xgb', 'RCC_CE-xgb',
       'RCC_CE-xgb', 'RCC_CE-xgb', 'RCC_CE-sgd', 'RCC_CE-sgd',
       'RCC_CE-sgd', 'RCC_CE-sgd', 'RCC_CE-sgd', 'RCC_CE-AdaBoost',
       'RCC_CE-AdaBoost', 'RCC_CE-AdaBoost', 'RCC_CE-AdaBoost',
       'RCC_CE-AdaBoost', 'RCC_CP-SVM', 'RCC_CP-SVM', 'RCC_CP-SVM',
       'RCC_CP-SVM', 'RCC_CP-SVM', 'RCC_CP-Gaussian', 'RCC_CP-Gaussian',
       'RCC_CP-Gaussian', 'RCC_CP-Gaussian', 'RCC_CP-Gaussian',
       'RCC_CP-LinearRegression', 'RCC_CP-LinearRegression',
       'RCC_CP-LinearRegression', 'RCC_CP-LinearRegression',
       'RCC_CP-LinearRegression', 'RCC_CP-randomforest',
       'RCC_CP-randomforest', 'RCC_CP-randomforest',
       'RCC_CP-randomforest', 'RCC_CP-randomforest', 'RCC_CP-xgb',
       'RCC_CP-xgb', 'RCC_CP-xgb', 'RCC_CP-xgb', 'RCC_CP-xgb',
       'RCC_CP-sgd', 'RCC_CP-sgd', 'RCC_CP-sgd', 'RCC_CP-sgd',
       'RCC_CP-sgd', 'RCC_CP-AdaBoost', 'RCC_CP-AdaBoost',
       'RCC_CP-AdaBoost', 'RCC_CP-AdaBoost', 'RCC_CP-AdaBoost',
       'RCC_MR-SVM', 'RCC_MR-SVM', 'RCC_MR-SVM', 'RCC_MR-SVM',
       'RCC_MR-SVM', 'RCC_MR-Gaussian', 'RCC_MR-Gaussian',
       'RCC_MR-Gaussian', 'RCC_MR-Gaussian', 'RCC_MR-Gaussian',
       'RCC_MR-LinearRegression', 'RCC_MR-LinearRegression',
       'RCC_MR-LinearRegression', 'RCC_MR-LinearRegression',
       'RCC_MR-LinearRegression', 'RCC_MR-randomforest',
       'RCC_MR-randomforest', 'RCC_MR-randomforest',
       'RCC_MR-randomforest', 'RCC_MR-randomforest', 'RCC_MR-xgb',
       'RCC_MR-xgb', 'RCC_MR-xgb', 'RCC_MR-xgb', 'RCC_MR-xgb',
       'RCC_MR-xgb', 'RCC_MR-xgb', 'RCC_MR-xgb', 'RCC_MR-xgb',
       'RCC_MR-xgb', 'RCC_MR-xgb', 'RCC_MR-xgb', 'RCC_MR-xgb',
       'RCC_MR-xgb', 'RCC_MR-xgb', 'RCC_MR-sgd', 'RCC_MR-sgd',
       'RCC_MR-sgd', 'RCC_MR-sgd', 'RCC_MR-sgd', 'RCC_MR-AdaBoost',
       'RCC_MR-AdaBoost', 'RCC_MR-AdaBoost', 'RCC_MR-AdaBoost',
       'RCC_MR-AdaBoost']

TimeList=[7.11265625e+02, 7.05000000e+02, 7.08671875e+02, 7.25937500e+02,
       7.21187500e+02, 1.25156250e+01, 1.25468750e+01, 1.25156250e+01,
       1.25000000e+01, 1.26406250e+01, 1.38978125e+03, 1.38514062e+03,
       1.37534375e+03, 1.36712500e+03, 1.40882812e+03, 4.83125000e+01,
       4.73125000e+01, 4.72656250e+01, 4.76250000e+01, 4.78437500e+01,
       5.18115625e+03, 5.21840625e+03, 5.21125000e+03, 5.25431250e+03,
       5.26867188e+03, 2.85265625e+02, 2.10703125e+02, 3.08125000e+02,
       2.75468750e+02, 3.05343750e+02, 1.16015625e+03, 1.16370312e+03,
       1.16223438e+03, 1.16198438e+03, 1.16176562e+03, 4.78765625e+02,
       4.52343750e+02, 4.40578125e+02, 4.68281250e+02, 4.72296875e+02,
       1.76875000e+01, 1.71250000e+01, 1.72968750e+01, 1.77968750e+01,
       1.81875000e+01, 1.23821719e+04, 1.50954688e+04, 1.24590781e+04,
       1.41936406e+04, 1.63791250e+04, 3.51562500e+00, 2.98437500e+00,
       3.03125000e+00, 3.09375000e+00, 3.07812500e+00, 1.36587344e+04,
       1.34528594e+04, 1.35676562e+04, 1.39770625e+04, 1.40621719e+04,
       2.92421875e+02, 2.83796875e+02, 2.82640625e+02, 2.87812500e+02,
       2.96765625e+02, 4.09062500e+01, 4.00937500e+01, 3.99531250e+01,
       4.02656250e+01, 4.02656250e+01, 6.85953125e+02, 6.84500000e+02,
       6.86593750e+02, 6.97671875e+02, 6.96640625e+02, 1.79218750e+01,
       1.79062500e+01, 1.79843750e+01, 1.79062500e+01, 1.79375000e+01,
       1.30773438e+03, 1.31145312e+03, 1.39987500e+03, 1.32728125e+03,
       1.36575000e+03, 2.99218750e+01, 2.88125000e+01, 2.89062500e+01,
       2.89531250e+01, 2.92500000e+01, 4.47768750e+03, 4.52807812e+03,
       4.57276562e+03, 4.53606250e+03, 4.55098438e+03, 2.96859375e+02,
       2.91796875e+02, 3.37421875e+02, 3.08828125e+02, 2.37156250e+02,
       5.71843750e+02, 5.73625000e+02, 5.71734375e+02, 5.74234375e+02,
       5.72031250e+02, 2.40234375e+02, 2.37218750e+02, 2.39812500e+02,
       2.41718750e+02, 2.40890625e+02, 2.78906250e+01, 2.78593750e+01,
       2.78906250e+01, 2.79531250e+01, 2.79062500e+01, 4.71765625e+02,
       4.57890625e+02, 4.81750000e+02, 4.84500000e+02, 4.54953125e+02,
       2.65000000e+01, 2.60781250e+01, 2.62656250e+01, 2.62656250e+01,
       2.62187500e+01, 2.79907812e+03, 2.77254688e+03, 2.84568750e+03,
       2.78437500e+03, 2.80331250e+03, 1.30609375e+02, 1.63421875e+02,
       1.70796875e+02, 1.69031250e+02, 1.69218750e+02, 3.04281250e+02,
       3.01734375e+02, 3.03578125e+02, 3.04031250e+02, 3.04531250e+02,
       2.40671875e+02, 2.39312500e+02, 2.39531250e+02, 2.40968750e+02,
       2.41343750e+02, 2.89375000e+01, 2.87031250e+01, 2.87500000e+01,
       2.88281250e+01, 2.87031250e+01, 4.84218750e+02, 4.71125000e+02,
       4.79796875e+02, 4.59890625e+02, 4.77718750e+02, 2.72500000e+01,
       2.71562500e+01, 2.70937500e+01, 2.70937500e+01, 2.72187500e+01,
       2.74090625e+03, 2.76467188e+03, 2.78540625e+03, 2.76060938e+03,
       2.78584375e+03, 1.51765625e+02, 1.46734375e+02, 1.73062500e+02,
       1.69828125e+02, 1.80781250e+02, 3.05359375e+02, 3.03734375e+02,
       3.04687500e+02, 3.04656250e+02, 3.05656250e+02, 2.39625000e+02,
       2.37625000e+02, 2.38828125e+02, 2.40390625e+02, 2.40500000e+02,
       2.65468750e+01, 2.65000000e+01, 2.64062500e+01, 2.66093750e+01,
       2.64687500e+01, 4.81484375e+02, 4.82031250e+02, 4.75921875e+02,
       4.48546875e+02, 4.63328125e+02, 2.51562500e+01, 2.46250000e+01,
       2.47031250e+01, 2.48593750e+01, 2.46875000e+01, 2.61465625e+03,
       2.66426562e+03, 2.65237500e+03, 2.66060938e+03, 2.66565625e+03,
       2.57673438e+03, 2.70957812e+03, 2.69582812e+03, 2.69148438e+03,
       2.70064062e+03, 2.76198438e+03, 2.82714062e+03, 2.82573438e+03,
       2.80729688e+03, 2.79540625e+03, 1.29421875e+02, 1.63921875e+02,
       1.68578125e+02, 1.75031250e+02, 1.70687500e+02, 3.03468750e+02,
       3.01109375e+02, 3.02390625e+02, 3.03109375e+02, 3.04312500e+02]

methd='BR-SVM'
Total=0.0
count=0;

for i, values in enumerate(methodlist):
    if(values==methd):
           Total=Total+TimeList[i]
           count=count+1;
    else:
           print(methd + ':' + str(count) + ':' + str(Total / count))
           methd=values
           Total = TimeList[i]
           count = 1

    if(i==len(methodlist)-1):
           print(methd +':' +str(count) +':' + str(Total / count))